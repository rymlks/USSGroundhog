//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""KeyboardDefaultControls"",
            ""id"": ""f5ae4770-370e-4a87-adf4-2dcbb699c845"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""35311dd3-fa75-46ac-abb7-7c3226d90a18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b0b53b3-efcf-4d8b-bab3-74e689af4a46"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardClimbingControls"",
            ""id"": ""f49c1360-e839-4952-848e-bdf5240143fd"",
            ""actions"": [
                {
                    ""name"": ""StopClimbing"",
                    ""type"": ""Button"",
                    ""id"": ""dec7396f-98f9-450d-9c83-2a263582a04c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b9849dd-803e-43c9-a508-04eb5d422c10"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopClimbing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeyboardDefaultControls
        m_KeyboardDefaultControls = asset.FindActionMap("KeyboardDefaultControls", throwIfNotFound: true);
        m_KeyboardDefaultControls_Interact = m_KeyboardDefaultControls.FindAction("Interact", throwIfNotFound: true);
        // KeyboardClimbingControls
        m_KeyboardClimbingControls = asset.FindActionMap("KeyboardClimbingControls", throwIfNotFound: true);
        m_KeyboardClimbingControls_StopClimbing = m_KeyboardClimbingControls.FindAction("StopClimbing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardDefaultControls
    private readonly InputActionMap m_KeyboardDefaultControls;
    private IKeyboardDefaultControlsActions m_KeyboardDefaultControlsActionsCallbackInterface;
    private readonly InputAction m_KeyboardDefaultControls_Interact;
    public struct KeyboardDefaultControlsActions
    {
        private @PlayerControls m_Wrapper;
        public KeyboardDefaultControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_KeyboardDefaultControls_Interact;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardDefaultControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardDefaultControlsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardDefaultControlsActions instance)
        {
            if (m_Wrapper.m_KeyboardDefaultControlsActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_KeyboardDefaultControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_KeyboardDefaultControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_KeyboardDefaultControlsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_KeyboardDefaultControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public KeyboardDefaultControlsActions @KeyboardDefaultControls => new KeyboardDefaultControlsActions(this);

    // KeyboardClimbingControls
    private readonly InputActionMap m_KeyboardClimbingControls;
    private IKeyboardClimbingControlsActions m_KeyboardClimbingControlsActionsCallbackInterface;
    private readonly InputAction m_KeyboardClimbingControls_StopClimbing;
    public struct KeyboardClimbingControlsActions
    {
        private @PlayerControls m_Wrapper;
        public KeyboardClimbingControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StopClimbing => m_Wrapper.m_KeyboardClimbingControls_StopClimbing;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardClimbingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardClimbingControlsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardClimbingControlsActions instance)
        {
            if (m_Wrapper.m_KeyboardClimbingControlsActionsCallbackInterface != null)
            {
                @StopClimbing.started -= m_Wrapper.m_KeyboardClimbingControlsActionsCallbackInterface.OnStopClimbing;
                @StopClimbing.performed -= m_Wrapper.m_KeyboardClimbingControlsActionsCallbackInterface.OnStopClimbing;
                @StopClimbing.canceled -= m_Wrapper.m_KeyboardClimbingControlsActionsCallbackInterface.OnStopClimbing;
            }
            m_Wrapper.m_KeyboardClimbingControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StopClimbing.started += instance.OnStopClimbing;
                @StopClimbing.performed += instance.OnStopClimbing;
                @StopClimbing.canceled += instance.OnStopClimbing;
            }
        }
    }
    public KeyboardClimbingControlsActions @KeyboardClimbingControls => new KeyboardClimbingControlsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IKeyboardDefaultControlsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IKeyboardClimbingControlsActions
    {
        void OnStopClimbing(InputAction.CallbackContext context);
    }
}
